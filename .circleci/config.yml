version: 2.1

executors:
  my-node:
    docker:
      - image: circleci/node:12.2
    environment:
      IMAGENAME_CLIENT: panda1920/complex-client
      IMAGENAME_SERVER: panda1920/complex-server
      IMAGENAME_WORKER: panda1920/complex-worker
      IMAGENAME_NGINX: panda1920/complex-nginx

orbs:
  aws-ecr: circleci/aws-ecr@6.8.2
  aws-cli: circleci/aws-cli@1.2.1
  gcp-cli: circleci/gcp-cli@1.8.4

jobs:
  test-frontend:
    executor: my-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-frontend-{{ checksum "./frontend/package-lock.json" }}
            - v1-frontend
      - run:
          name: Installing dependencies
          command: |
            cd ./frontend
            npm install
      - run:
          name: Run tests
          command: |
            cd ./frontend
            npm run test
      - save_cache:
          when: on_success
          key: v1-frontend-{{ checksum "./frontend/package-lock.json" }}
          paths:
            - "./frontend/node_modules"

  deploy-frontend:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_REGION
          checkout: true
          path: './frontend'
          extra-build-args: '--pull --no-cache'
          repo: udemy-frontend

  complex-test:
    executor: my-node
    steps:
      - checkout
      - restore_cache:
          name: Restoring cache for client
          keys:
            - v1-complex-{{ checksum "./complex/client/package.json" }}-{{ checksum "./complex/server/package.json" }}-{{ checksum "./complex/worker/package.json" }}
            - v1-complex
      - run:
          name: Installing dependencies
          command: |
            cd ./complex/client
            npm install
            cd ../server
            npm install
            cd ../worker
            npm install
      - run:
          name: Run tests
          command: |
            cd ./complex/client
            npm run test
      - save_cache:
          name: Saving cache
          when: on_success
          key: v1-complex-{{ checksum "./complex/client/package.json" }}-{{ checksum "./complex/server/package.json" }}-{{ checksum "./complex/worker/package.json" }}
          paths:
            - "./complex/client/node_modules"
            - "./complex/server/node_modules"
            - "./complex/worker/node_modules"

  complex-build:
    executor: my-node
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build images
          command: |
            cd ./complex/client
            docker build -t $IMAGENAME_CLIENT:latest --no-cache --pull .
            cd ../server
            docker build -t $IMAGENAME_SERVER:latest --no-cache --pull .
            cd ../worker
            docker build -t $IMAGENAME_WORKER:latest --no-cache --pull .
            cd ../nginx
            docker build -t $IMAGENAME_NGINX:latest --no-cache --pull .
      - run:
          name: Send images to dockerhub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGENAME_CLIENT:latest
            docker push $IMAGENAME_SERVER:latest
            docker push $IMAGENAME_WORKER:latest
            docker push $IMAGENAME_NGINX:latest

  # https://stackoverflow.com/questions/37644881/how-to-use-aws-cli-with-elastic-beanstalk
  complex-deploy:
    executor: aws-cli/default
    working_directory: ~/repo
    environment:
      BUCKET_NAME: elasticbeanstalk-ap-northeast-1-015643504464
      APP_NAME: complex-docker
      ENV_NAME: ComplexDocker-env
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Setup additional env vars requiring interpolation
          command: |
            echo "export VERSION=v-$CIRCLE_SHA1" >> $BASH_ENV
            echo $VERSION
      - run:
          name: Create source bundle
          command: |
            cd ./complex
            zip ../complex-docker.zip -r * .[^.]*
      - run:
          name: Deploy code to elastic beanstalk
          command: |
            aws s3 cp complex-docker.zip s3://$BUCKET_NAME/sources/
            aws elasticbeanstalk create-application-version --application-name $APP_NAME --version-label $VERSION --source-bundle S3Bucket="$BUCKET_NAME",S3Key="sources/complex-docker.zip"
            aws elasticbeanstalk update-environment --application-name $APP_NAME --environment-name $ENV_NAME --version-label $VERSION

  complex-k8s-test:
    executor: my-node
    steps:
      - checkout
      - restore_cache:
          name: Restoring cache for client
          keys:
            - v1-complex-{{ checksum "./complex-kubernetes/client/package.json" }}-{{ checksum "./complex-kubernetes/server/package.json" }}-{{ checksum "./complex-kubernetes/worker/package.json" }}
            - v1-complex
      - run:
          name: Installing dependencies
          command: |
            cd ./complex-kubernetes/client
            npm install
      - run:
          name: Run tests
          command: |
            cd ./complex-kubernetes/client
            npm run test
      - save_cache:
          name: Saving cache
          when: on_success
          key: v1-complex-{{ checksum "./complex-kubernetes/client/package.json" }}-{{ checksum "./complex-kubernetes/server/package.json" }}-{{ checksum "./complex-kubernetes/worker/package.json" }}
          paths:
            - "./complex-kubernetes/client/node_modules"
            - "./complex-kubernetes/server/node_modules"
            - "./complex-kubernetes/worker/node_modules"

  complex-k8s-build:
    executor: my-node
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build images
          command: |
            cd ./complex-kubernetes/client
            docker build -t $IMAGENAME_CLIENT:latest -t $IMAGENAME_CLIENT:${CIRCLE_SHA1} --no-cache --pull .
            cd ../server
            docker build -t $IMAGENAME_SERVER:latest -t $IMAGENAME_SERVER:${CIRCLE_SHA1} --no-cache --pull .
            cd ../worker
            docker build -t $IMAGENAME_WORKER:latest -t $IMAGENAME_WORKER:${CIRCLE_SHA1} --no-cache --pull .
      - run:
          name: Send images to dockerhub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGENAME_CLIENT:latest
            docker push $IMAGENAME_CLIENT:${CIRCLE_SHA1}
            docker push $IMAGENAME_SERVER:latest
            docker push $IMAGENAME_SERVER:${CIRCLE_SHA1}
            docker push $IMAGENAME_WORKER:latest
            docker push $IMAGENAME_WORKER:${CIRCLE_SHA1}

  complex-k8s-deploy:
    executor: gcp-cli/default
    environment:
      CLUSTER_NAME: complex-cluster
    steps:
      - checkout
      - gcp-cli/install
      - gcp-cli/initialize:
          gcloud-service-key: GOOGLE_SERVICE_KEY
          google-compute-zone: GOOGLE_COMPUTE_ZONE
          google-project-id: GOOGLE_PROJECT_ID
      - run:
          name: Install kubectl
          command: |
            gcloud components list
            gcloud components install -q kubectl
            gcloud components list
      - run:
          name: Additional settings
          command: |
            gcloud container clusters get-credentials ${CLUSTER_NAME}
      - run:
          name: Apply new configuration to GCP kubernetes cluster
          command: |
            kubectl apply -f ./complex-kubernetes/k8s
            kubectl set image deployments/client-deployment client=$IMAGENAME_CLIENT:$CIRCLE_SHA1
            kubectl set image deployments/server-deployment server=$IMAGENAME_SERVER:$CIRCLE_SHA1
            kubectl set image deployment/worker-deployment worker=$IMAGENAME_WORKER:$CIRCLE_SHA1


workflows:
  # build-and-test:
  #   jobs:
  #     - test-frontend
  #     - deploy-frontend:
  #         requires:
  #           - test-frontend
  #         context: AWS
  # complex-build-and-test:
  #   jobs:
  #     - complex-test
  #     - complex-build:
  #         requires:
  #           - complex-test
      # - complex-deploy:
      #     requires:
      #       - complex-build
      #     context: AWS
      #     filters:
      #       branches:
      #         only:
      #           - master
  complex-k8s:
    jobs:
      # - complex-k8s-test
      - complex-k8s-build
      - complex-k8s-deploy:
          requires:
            - complex-k8s-build
