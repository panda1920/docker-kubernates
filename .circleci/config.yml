version: 2.1

executors:
  my-node:
    docker:
      - image: circleci/node:12.2

orbs:
  aws-ecr: circleci/aws-ecr@6.8.2

jobs:
  test-frontend:
    executor: my-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-frontend-{{ checksum "./frontend/package-lock.json" }}
            - v1-frontend
      - run:
          name: Installing dependencies
          command: |
            cd ./frontend
            npm install
      - run:
          name: Run tests
          command: |
            cd ./frontend
            npm run test
      - save_cache:
          when: on_success
          key: v1-frontend-{{ checksum "./frontend/package-lock.json" }}
          paths:
            - "./frontend/node_modules"

  deploy-frontend:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_REGION
          checkout: true
          path: './frontend'
          extra-build-args: '--pull --no-cache'
          repo: udemy-frontend

  complex-test:
    executor: my-node
    steps:
      - checkout
      - restore_cache:
        name: Restoring cache for client
        keys:
          - v1-complex-client-{{ checksum "./client/package-lock.json" }}
          - v1-complex-client
    - restore_cache:
        name: Restoring cache for server
        keys:
          - v1-complex-server-{{ checksum "./server/package-lock.json" }}
          - v1-complex-server
    - restore_cache:
        name: Restoring cache for worker
        keys:
          - v1-complex-worker-{{ checksum "./worker/package-lock.json" }}
          - v1-complex-worker
    - run:
        name: Installing dependencies
        command: |
          cd ./client
          npm install
          cd ./server
          npm install
          cd ./worker
          npm install
    - run:
        name: Run tests
        command: |
          cd ./client
          npm run test
    - save_cache:
      name: Saving client cache
      when: on_success
      key: v1-complex-client-{{ checksum "./client/package-lock.json" }}
      paths:
        - "./client/node_modules"
    - save_cache:
      name: Saving server cache
      when: on_success
      key: v1-complex-server-{{ checksum "./server/package-lock.json" }}
      paths:
        - "./server/node_modules"
    - save_cache:
      name: Saving worker cache
      when: on_success
      key: v1-complex-worker-{{ checksum "./worker/package-lock.json" }}
      paths:
        - "./worker/node_modules"

  complex-build:
    executor: my_node
    environment:
      IMAGENAME_CLIENT: panda1920/complex/client
      IMAGENAME_SERVER: panda1920/complex/server
      IMAGENAME_WORKER: panda1920/complex/worker
      IMAGENAME_NGINX: panda1920/complex/nginx
    steps:
      - checkout
      - restore_cache:
        name: Restoring cache for client
        keys:
          - v1-complex-client-{{ checksum "./client/package-lock.json" }}
          - v1-complex-client
    - restore_cache:
        name: Restoring cache for server
        keys:
          - v1-complex-server-{{ checksum "./server/package-lock.json" }}
          - v1-complex-server
    - restore_cache:
        name: Restoring cache for worker
        keys:
          - v1-complex-worker-{{ checksum "./worker/package-lock.json" }}
          - v1-complex-worker
    - run:
      name: Installing dependencies
      command: |
        cd ./client
        npm install
        cd ./server
        npm install
        cd ./worker
        npm install
    - run:
        name: Build images
        command: |
          cd ./client
          docker build -t $IMAGENAME_CLIENT --no-cache --pull .
          cd ./server
          docker build -t $IMAGENAME_SERVER --no-cache --pull .
          cd ./worker
          docker build -t $IMAGENAME_WORKER --no-cache --pull .
          cd ./nginx
          docker build -t $IMAGENAME_NGINX --no-cache --pull .
    - run:
        name: Send images to dockerhub
        command: |
          echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          docker push $IMAGENAME_CLIENT
          docker push $IMAGENAME_SERVER
          docker push $IMAGENAME_WORKER
          docker push $IMAGENAME_NGINX

workflows:
  # build-and-test:
  #   jobs:
  #     - test-frontend
  #     - deploy-frontend:
  #         requires:
  #           - test-frontend
  #         context: AWS
  complex-build-and-test:
    jobs:
      - complex-test
      - complex-build
