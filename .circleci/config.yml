version: 2.1

executors:
  my-node:
    docker:
      - image: circleci/node:12.2

orbs:
  aws-ecr: circleci/aws-ecr@6.8.2
  aws-cli: circleci/aws-cli@1.2.1

jobs:
  test-frontend:
    executor: my-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-frontend-{{ checksum "./frontend/package-lock.json" }}
            - v1-frontend
      - run:
          name: Installing dependencies
          command: |
            cd ./frontend
            npm install
      - run:
          name: Run tests
          command: |
            cd ./frontend
            npm run test
      - save_cache:
          when: on_success
          key: v1-frontend-{{ checksum "./frontend/package-lock.json" }}
          paths:
            - "./frontend/node_modules"

  deploy-frontend:
    executor: aws-ecr/default
    steps:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_REGION
          checkout: true
          path: './frontend'
          extra-build-args: '--pull --no-cache'
          repo: udemy-frontend

  complex-test:
    executor: my-node
    steps:
      - checkout
      - restore_cache:
          name: Restoring cache for client
          keys:
            - v1-complex-{{ checksum "./complex/client/package.json" }}-{{ checksum "./complex/server/package.json" }}-{{ checksum "./complex/worker/package.json" }}
            - v1-complex
      - run:
          name: Installing dependencies
          command: |
            cd ./complex/client
            npm install
            cd ../server
            npm install
            cd ../worker
            npm install
      - run:
          name: Run tests
          command: |
            cd ./complex/client
            npm run test
      - save_cache:
          name: Saving cache
          when: on_success
          key: v1-complex-{{ checksum "./complex/client/package.json" }}-{{ checksum "./complex/server/package.json" }}-{{ checksum "./complex/worker/package.json" }}
          paths:
            - "./complex/client/node_modules"
            - "./complex/server/node_modules"
            - "./complex/worker/node_modules"

  complex-build:
    executor: my-node
    environment:
      IMAGENAME_CLIENT: panda1920/complex-client:latest
      IMAGENAME_SERVER: panda1920/complex-server:latest
      IMAGENAME_WORKER: panda1920/complex-worker:latest
      IMAGENAME_NGINX: panda1920/complex-nginx:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build images
          command: |
            cd ./complex/client
            docker build -t $IMAGENAME_CLIENT --no-cache --pull .
            cd ../server
            docker build -t $IMAGENAME_SERVER --no-cache --pull .
            cd ../worker
            docker build -t $IMAGENAME_WORKER --no-cache --pull .
            cd ../nginx
            docker build -t $IMAGENAME_NGINX --no-cache --pull .
      - run:
          name: Send images to dockerhub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGENAME_CLIENT
            docker push $IMAGENAME_SERVER
            docker push $IMAGENAME_WORKER
            docker push $IMAGENAME_NGINX

  complex-deploy:
    executor: aws-cli/default
    working_directory: ~/repo
    steps:
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: AWS_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      # - run:
      #     name: Install elastic beanstalk cli
      #     command: |
      #       pip install awsebcli --upgrade --user
      - run:
          name: Deploy code to elastic beanstalk
          command: |
            cd ./complex
            aws elasticbeanstalk update-application --application-name complex-docker --description "Hello this is a new description"
            


workflows:
  # build-and-test:
  #   jobs:
  #     - test-frontend
  #     - deploy-frontend:
  #         requires:
  #           - test-frontend
  #         context: AWS
  complex-build-and-test:
    jobs:
      # - complex-test
      # - complex-build:
      #     requires:
      #       - complex-test
      - complex-deploy:
          # requires:
          #   - complex-build
          context: AWS
          filters:
            branches:
              only:
                - master
